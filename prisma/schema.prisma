// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// customer model
model Customer {
  id         Int      @id @default(autoincrement())
  customerId String   @unique @db.VarChar(255)
  firstName  String
  lastName   String
  email      String   @unique
  phone      String   @unique
  address    String
  city       String
  state      String
  zipCode    String
  createdAt  DateTime @default(now())

  // orders Order[]
  // reviews Review[]
  Orders Order[]
  Review Review[]
}

// product model
model Product {
  id             Int       @id @default(autoincrement())
  productId      String    @unique @db.VarChar(255)
  images         Json?
  product_name   String    @db.VarChar(255)
  price          Int
  discount_price Int?
  stock          Int?      @default(0)
  category       String?
  description    String?   @db.LongText
  rating         Int?
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamp(0)

  // orderItems OrderItem[]
  // reviews Review[]
  Category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
  OrderItem  OrderItem[]
  Review     Review[]
}

// category model
model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  products Product[]
}

// order model
model Order {
  id          Int         @id @default(autoincrement())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int
  totalPrice  Int
  orderStatus OrderStatus @default(PENDING)
  orderDate   DateTime    @default(now())

  items    OrderItem[]
  payment  Payment?
  shipping Shipping?
}

// order item model
model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

// review model
model Review {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
}

// payment model
model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  paymentMethod PaymentMethod
  amount        Float
  paymentStatus PaymentStaus  @default(PENDING)
  paymentDate   DateTime      @default(now())
}

// shipping model
model Shipping {
  id              Int       @id @default(autoincrement())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         Int       @unique
  shippingAddress String
  city            String
  state           String
  zipCode         String
  shippingDate    DateTime?
  deliveryDate    DateTime?
}

// all enums
enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  BKASH
  CASH_ON_DELIVERY
}

enum PaymentStaus {
  PENDING
  COMPLETED
  FAILED
}
